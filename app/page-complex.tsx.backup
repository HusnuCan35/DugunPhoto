"use client";
import { useEffect, useState, useCallback } from "react";
import Link from "next/link";
import { supabase } from "../src/lib/supabaseClient";
import { localStorageUtils, LocalPhoto } from "../src/lib/localStorageUtils";
import ThemeToggle from "../components/ThemeToggle";

export default function Home() {
  const [photos, setPhotos] = useState<any[]>([]);
  const [uploading, setUploading] = useState(false);
  const [file, setFile] = useState<File | null>(null);
  const [error, setError] = useState("");
  const [uploadSuccess, setUploadSuccess] = useState(false);
  const [selectedPhoto, setSelectedPhoto] = useState<string | null>(null);
  const [selectedPhotoIndex, setSelectedPhotoIndex] = useState<number | null>(null);
  const [userId, setUserId] = useState<string>("");
  const [userName, setUserName] = useState<string>("");
  const [showNameModal, setShowNameModal] = useState(false);
  const [tempUserName, setTempUserName] = useState("");
  const [userNameError, setUserNameError] = useState("");
  const [userNameChecking, setUserNameChecking] = useState(false);
  const [existingUserNames, setExistingUserNames] = useState<string[]>([]);
  const [dragOver, setDragOver] = useState(false);

  useEffect(() => {
    const storedUserId = localStorage.getItem("dugunPhotoUserId");
    const storedUserName = localStorage.getItem("dugunPhotoUserName");
    
    if (storedUserId) {
      setUserId(storedUserId);
      
      if (storedUserName) {
        setUserName(storedUserName);
      } else {
        loadExistingUserNames();
        setShowNameModal(true);
      }
    } else {
      const newUserId = Date.now().toString() + Math.random().toString(36).substring(2, 9);
      localStorage.setItem("dugunPhotoUserId", newUserId);
      setUserId(newUserId);
      loadExistingUserNames();
      setShowNameModal(true);
    }
  }, []);

  useEffect(() => {
    if (userId && !showNameModal) {
      fetchPhotos();
    }
  }, [userId, showNameModal]);

  const handleKeyDown = useCallback((e: KeyboardEvent) => {
    if (!selectedPhotoIndex && selectedPhotoIndex !== 0) return;
    
    if (e.key === "ArrowRight" || e.key === "ArrowDown") {
      const nextIndex = (selectedPhotoIndex + 1) % photos.length;
      setSelectedPhotoIndex(nextIndex);
      const nextPhoto = photos[nextIndex];
      const nextPhotoUrl = nextPhoto.localUrl || 
        (supabase.storage.from("photos").getPublicUrl(nextPhoto.name).data?.publicUrl || 
        '/fallback/photo-placeholder.jpg');
      setSelectedPhoto(nextPhotoUrl);
    } else if (e.key === "ArrowLeft" || e.key === "ArrowUp") {
      const prevIndex = (selectedPhotoIndex - 1 + photos.length) % photos.length;
      setSelectedPhotoIndex(prevIndex);
      const prevPhoto = photos[prevIndex];
      const prevPhotoUrl = prevPhoto.localUrl || 
        (supabase.storage.from("photos").getPublicUrl(prevPhoto.name).data?.publicUrl || 
        '/fallback/photo-placeholder.jpg');
      setSelectedPhoto(prevPhotoUrl);
    } else if (e.key === "Escape") {
      setSelectedPhoto(null);
      setSelectedPhotoIndex(null);
    }
  }, [selectedPhotoIndex, photos]);

  useEffect(() => {
    if (selectedPhoto !== null) {
      window.addEventListener("keydown", handleKeyDown);
    } else {
      window.removeEventListener("keydown", handleKeyDown);
    }
    
    return () => {
      window.removeEventListener("keydown", handleKeyDown);
    };
  }, [selectedPhoto, handleKeyDown]);

  async function loadExistingUserNames() {
    try {
      const { data, error } = await supabase.storage.from("photos").list();
      
      if (!error && data) {
        const names = data.map(photo => {
          const parts = photo.name?.split('_') || [];
          return parts.length > 1 ? parts[1].replace(/_/g, ' ') : '';
        }).filter(name => name !== '');
        
        const uniqueNames = [...new Set(names)];
        setExistingUserNames(uniqueNames);
      }
    } catch (err) {
      console.error("Kullanıcı isimleri yüklenirken hata:", err);
    }
  }

  const checkUserNameUnique = useCallback((name: string) => {
    if (!name.trim()) return false;
    
    const normalizedName = name.trim().toLowerCase();
    return !existingUserNames.some(existing => 
      existing.toLowerCase() === normalizedName
    );
  }, [existingUserNames]);

  function handleNameSubmit(e: React.FormEvent) {
    e.preventDefault();
    setUserNameError("");
    
    if (!tempUserName.trim()) {
      setUserNameError("Lütfen bir isim girin");
      return;
    }
    
    if (!checkUserNameUnique(tempUserName)) {
      setUserNameError("Bu isim zaten kullanılıyor, lütfen başka bir isim seçin");
      return;
    }
    
    localStorage.setItem("dugunPhotoUserName", tempUserName.trim());
    setUserName(tempUserName.trim());
    setShowNameModal(false);
  }

  function handleNameChange(e: React.ChangeEvent<HTMLInputElement>) {
    const newName = e.target.value;
    setTempUserName(newName);
    
    if (newName.trim()) {
      setUserNameChecking(true);
      setTimeout(() => {
        if (!checkUserNameUnique(newName)) {
          setUserNameError("Bu isim zaten kullanılıyor, lütfen başka bir isim seçin");
        } else {
          setUserNameError("");
        }
        setUserNameChecking(false);
      }, 300);
    } else {
      setUserNameError("");
      setUserNameChecking(false);
    }
  }

  async function fetchPhotos() {
    if (!userId) return;
    
    try {
      // Önce Supabase'den çekmeyi dene
      const { data, error } = await supabase.storage
        .from("photos")
        .list("", { 
          search: `${userId}_` 
        });
      
      if (error) {
        console.error("Supabase hatası, localStorage'a geçiliyor:", error);
        
        // Supabase hatası varsa localStorage'dan getir
        const localPhotos = localStorageUtils.getUserPhotos(userId);
        const processedLocalPhotos = localPhotos.map(photo => ({
          name: photo.name,
          id: photo.id,
          publicUrl: photo.blob,
          localUrl: photo.blob,
          isLocal: true
        }));
        
        setPhotos(processedLocalPhotos);
        return;
      } else {
        // Supabase başarılı, normal işlem
        const processedPhotos = data?.map(photo => {
          const publicUrl = supabase.storage.from("photos").getPublicUrl(photo.name).data?.publicUrl || '';
          return { ...photo, publicUrl };
        }) || [];
        
        // LocalStorage'daki fotoğrafları da ekle
        const localPhotos = localStorageUtils.getUserPhotos(userId);
        const processedLocalPhotos = localPhotos.map(photo => ({
          name: photo.name,
          id: photo.id,
          publicUrl: photo.blob,
          localUrl: photo.blob,
          isLocal: true
        }));
        
        // Her ikisini birleştir
        const allPhotos = [...processedPhotos, ...processedLocalPhotos];
        setPhotos(allPhotos);
      }
    } catch (err) {
      console.error("Beklenmeyen hata, localStorage'a geçiliyor:", err);
      
      // Tamamen fallback mod
      const localPhotos = localStorageUtils.getUserPhotos(userId);
      const processedLocalPhotos = localPhotos.map(photo => ({
        name: photo.name,
        id: photo.id,
        publicUrl: photo.blob,
        localUrl: photo.blob,
        isLocal: true
      }));
      
      setPhotos(processedLocalPhotos);
    }
  }

  async function handleUpload() {
    if (!file || !userId) return;
    
    setUploading(true);
    setError("");
    setUploadSuccess(false);
    
    try {
      console.log("Dosya yükleniyor...");
      
      const timestamp = new Date().getTime();
      const fileExt = file.name.split('.').pop();
      const userInfo = userName ? `${userId}_${userName.replace(/[^a-zA-Z0-9]/g, "_")}` : userId;
      const fileName = `${userInfo}_${timestamp}_${Math.random().toString(36).substring(2, 15)}.${fileExt}`;
      
      const { error } = await supabase.storage
        .from("photos")
        .upload(fileName, file, {
          cacheControl: '3600',
          upsert: true
        });
      
      if (error) {
        console.error("Supabase yükleme hatası, localStorage'a kaydediliyor:", error);
        
        // Supabase'e yüklenemiyorsa localStorage'a kaydet
        try {
          const base64 = await localStorageUtils.fileToBase64(file);
          const localPhoto: LocalPhoto = {
            id: fileName,
            name: fileName,
            blob: base64,
            timestamp: Date.now(),
            userId: userId,
            userName: userName
          };
          
          localStorageUtils.savePhoto(localPhoto);
          
          setFile(null);
          setUploadSuccess(true);
          fetchPhotos(); // LocalStorage'dan yeniden yükle
          setTimeout(() => setUploadSuccess(false), 3000);
        } catch (localError) {
          console.error("LocalStorage'a da kaydedilemedi:", localError);
          setError("Fotoğraf kaydedilemedi. Lütfen daha sonra tekrar deneyin.");
        }
      } else {
        console.log("Fotoğraf başarıyla Supabase'e yüklendi!");
        setFile(null);
        setUploadSuccess(true);
        fetchPhotos();
        setTimeout(() => setUploadSuccess(false), 3000);
      }
    } catch (err) {
      console.error("Beklenmeyen yükleme hatası:", err);
      setError("Fotoğraf yüklenirken bir sorun oluştu. Lütfen daha sonra tekrar deneyin.");
    } finally {
      setUploading(false);
    }
  }

  function handlePhotoClick(photoUrl: string, index: number) {
    setSelectedPhoto(photoUrl);
    setSelectedPhotoIndex(index);
  }

  // Drag and drop handlers
  const handleDragOver = (e: React.DragEvent) => {
    e.preventDefault();
    setDragOver(true);
  };

  const handleDragLeave = (e: React.DragEvent) => {
    e.preventDefault();
    setDragOver(false);
  };

  const handleDrop = (e: React.DragEvent) => {
    e.preventDefault();
    setDragOver(false);
    
    const files = e.dataTransfer.files;
    if (files.length > 0) {
      const file = files[0];
      if (file.type.startsWith('image/')) {
        setFile(file);
      }
    }
  };

  return (
    <div className="min-h-screen bg-gray-50 dark:bg-gray-900 transition-all duration-500">
      {/* Modern Header */}
      <header className="sticky top-0 z-40 backdrop-blur-xl bg-white/80 dark:bg-gray-900/80 border-b border-gray-200/50 dark:border-gray-700/50">
        <div className="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex items-center justify-between h-16">
            <div className="flex items-center space-x-4">
              <div className="w-10 h-10 bg-gradient-to-br from-purple-600 to-pink-600 rounded-xl flex items-center justify-center shadow-lg">
                <svg className="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                </svg>
              </div>
              <div>
                <h1 className="text-xl font-bold bg-gradient-to-r from-gray-900 to-gray-600 dark:from-white dark:to-gray-300 bg-clip-text text-transparent">
                  Düğün Fotoğrafları
                </h1>
                <p className="text-sm text-gray-500 dark:text-gray-400">Anılarınızı paylaşın</p>
              </div>
            </div>

            <div className="flex items-center space-x-3">
              <ThemeToggle />
              <Link 
                href="/admin" 
                className="px-4 py-2 text-sm font-medium text-gray-700 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white transition-colors duration-200"
              >
                Yönetici
              </Link>
            </div>
          </div>
        </div>
      </header>

      {/* Name Modal */}
      {showNameModal && (
        <div className="fixed inset-0 bg-black/60 backdrop-blur-sm flex items-center justify-center z-50 p-4">
          <div className="bg-white dark:bg-gray-800 rounded-2xl shadow-2xl p-8 w-full max-w-md border border-gray-200 dark:border-gray-700">
            <div className="text-center mb-6">
              <div className="w-16 h-16 bg-gradient-to-br from-purple-600 to-pink-600 rounded-2xl flex items-center justify-center mx-auto mb-4">
                <svg className="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                </svg>
              </div>
              <h2 className="text-2xl font-bold text-gray-900 dark:text-white mb-2">Hoş Geldiniz!</h2>
              <p className="text-gray-600 dark:text-gray-400">Fotoğraflarınızın altında görünecek isminizi giriniz</p>
            </div>
            
            <form onSubmit={handleNameSubmit} className="space-y-6">
              <div>
                <input
                  type="text"
                  value={tempUserName}
                  onChange={handleNameChange}
                  placeholder="Adınız ve Soyadınız"
                  className={`w-full px-4 py-3 border rounded-xl bg-white dark:bg-gray-700 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400 focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-all duration-200 ${
                    userNameError ? 'border-red-500' : 'border-gray-300 dark:border-gray-600'
                  }`}
                  required
                />
                {userNameError && (
                  <p className="text-red-500 text-sm mt-2">{userNameError}</p>
                )}
                {userNameChecking && (
                  <p className="text-blue-500 text-sm mt-2">İsim kontrol ediliyor...</p>
                )}
                {tempUserName && !userNameError && !userNameChecking && (
                  <p className="text-green-500 text-sm mt-2">Bu isim kullanılabilir</p>
                )}
              </div>
              <button
                type="submit"
                disabled={!!userNameError || userNameChecking || !tempUserName.trim()}
                className="w-full bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 disabled:opacity-50 text-white py-3 rounded-xl font-medium transition-all duration-200 shadow-sm hover:shadow-md"
              >
                Kaydet ve Devam Et
              </button>
            </form>
          </div>
        </div>
      )}

      {/* Main Content */}
      <main className="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          {/* Upload Section */}
          <div className="space-y-6">
            <div className="bg-white dark:bg-gray-800 rounded-2xl p-6 shadow-sm border border-gray-200/50 dark:border-gray-700/50">
              <h2 className="text-xl font-bold text-gray-900 dark:text-white mb-4">
                Fotoğraf Paylaşın
              </h2>
              
              {userName && (
                <div className="flex items-center justify-between bg-purple-50 dark:bg-purple-900/20 rounded-xl p-4 mb-6">
                  <div className="flex items-center space-x-3">
                    <div className="w-8 h-8 bg-purple-600 rounded-full flex items-center justify-center">
                      <span className="text-white text-sm font-bold">
                        {userName.charAt(0).toUpperCase()}
                      </span>
                    </div>
                    <div>
                      <p className="text-sm font-medium text-purple-900 dark:text-purple-100">
                        {userName}
                      </p>
                      <p className="text-xs text-purple-600 dark:text-purple-400">
                        Aktif kullanıcı
                      </p>
                    </div>
                  </div>
                  <button
                    onClick={() => {
                      localStorage.removeItem("dugunPhotoUserId");
                      localStorage.removeItem("dugunPhotoUserName");
                      window.location.reload();
                    }}
                    className="text-sm text-red-600 dark:text-red-400 hover:text-red-700 dark:hover:text-red-300 transition-colors"
                  >
                    Çıkış Yap
                  </button>
                </div>
              )}

              <div 
                className={`border-2 border-dashed rounded-2xl p-8 text-center transition-all duration-300 ${
                  dragOver 
                    ? 'border-purple-500 bg-purple-50 dark:bg-purple-900/20 scale-105' 
                    : file 
                      ? 'border-green-500 bg-green-50 dark:bg-green-900/20' 
                      : 'border-gray-300 dark:border-gray-600 hover:border-purple-400 dark:hover:border-purple-500'
                }`}
                onDragOver={handleDragOver}
                onDragLeave={handleDragLeave}
                onDrop={handleDrop}
              >
                <input
                  type="file"
                  accept="image/*"
                  onChange={e => setFile(e.target.files?.[0] || null)}
                  className="hidden"
                  id="fileInput"
                />
                <label htmlFor="fileInput" className="cursor-pointer block">
                  {file ? (
                    <div className="space-y-2">
                      <div className="w-16 h-16 bg-green-100 dark:bg-green-900/30 rounded-2xl flex items-center justify-center mx-auto">
                        <svg className="w-8 h-8 text-green-600 dark:text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                        </svg>
                      </div>
                      <div>
                        <p className="font-medium text-green-800 dark:text-green-200">{file.name}</p>
                        <p className="text-sm text-green-600 dark:text-green-400">
                          {(file.size / 1024 / 1024).toFixed(2)} MB
                        </p>
                      </div>
                    </div>
                  ) : (
                    <div className="space-y-4">
                      <div className="w-16 h-16 bg-gray-100 dark:bg-gray-700 rounded-2xl flex items-center justify-center mx-auto">
                        <svg className="w-8 h-8 text-gray-600 dark:text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                        </svg>
                      </div>
                      <div>
                        <p className="font-medium text-gray-900 dark:text-white">
                          Fotoğraf seçin veya sürükleyip bırakın
                        </p>
                        <p className="text-sm text-gray-500 dark:text-gray-400 mt-1">
                          PNG, JPG, WEBP - Maksimum 10MB
                        </p>
                      </div>
                    </div>
                  )}
                </label>
              </div>

              <button
                onClick={handleUpload}
                disabled={uploading || !file}
                className="w-full mt-6 bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 disabled:opacity-50 text-white py-3 rounded-xl font-medium transition-all duration-200 shadow-sm hover:shadow-md flex items-center justify-center space-x-2"
              >
                {uploading ? (
                  <>
                    <svg className="animate-spin w-5 h-5" fill="none" viewBox="0 0 24 24">
                      <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                      <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                    <span>Yükleniyor...</span>
                  </>
                ) : (
                  <>
                    <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
                    </svg>
                    <span>Fotoğrafı Paylaş</span>
                  </>
                )}
              </button>
              
              {error && (
                <div className="mt-4 p-4 bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-xl text-red-800 dark:text-red-200 text-sm">
                  {error}
                </div>
              )}
              {uploadSuccess && (
                <div className="mt-4 p-4 bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 rounded-xl text-green-800 dark:text-green-200 text-sm">
                  Fotoğraf başarıyla yüklendi!
                </div>
              )}
            </div>
          </div>

          {/* Photos Section */}
          <div className="space-y-6">
            <div className="bg-white dark:bg-gray-800 rounded-2xl p-6 shadow-sm border border-gray-200/50 dark:border-gray-700/50">
              <div className="flex items-center justify-between mb-6">
                <h2 className="text-xl font-bold text-gray-900 dark:text-white">
                  Paylaştığınız Fotoğraflar
                </h2>
                <div className="text-sm bg-purple-100 dark:bg-purple-900/30 text-purple-800 dark:text-purple-200 px-3 py-1 rounded-full">
                  {photos.length} fotoğraf
                </div>
              </div>

              {photos.length === 0 ? (
                <div className="text-center py-12">
                  <div className="w-16 h-16 bg-gray-100 dark:bg-gray-700 rounded-2xl flex items-center justify-center mx-auto mb-4">
                    <svg className="w-8 h-8 text-gray-400 dark:text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1} d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                    </svg>
                  </div>
                  <h3 className="text-lg font-medium text-gray-900 dark:text-white mb-2">
                    Henüz fotoğraf yok
                  </h3>
                  <p className="text-gray-500 dark:text-gray-400">
                    İlk fotoğrafınızı paylaşarak başlayın
                  </p>
                </div>
              ) : (
                <div className="grid grid-cols-2 gap-4">
                  {photos.map((photo: any, index: number) => {
                    const photoUrl = photo.publicUrl || photo.localUrl || 
                      (supabase.storage.from("photos").getPublicUrl(photo.name).data?.publicUrl || 
                      '/fallback/photo-placeholder.jpg');
                    
                    return (
                      <div 
                        key={photo.name || photo.id} 
                        className="group relative aspect-square rounded-2xl overflow-hidden bg-gray-100 dark:bg-gray-700 shadow-sm hover:shadow-lg transition-all duration-300 cursor-pointer"
                        onClick={() => handlePhotoClick(photoUrl, index)}
                      >
                        <img
                          src={photoUrl}
                          alt="Paylaşılan fotoğraf"
                          className="object-cover w-full h-full group-hover:scale-110 transition-transform duration-500"
                          onError={(e) => {
                            console.error("Fotoğraf yüklenemedi:", photo.name);
                            e.currentTarget.src = '/fallback/photo-placeholder.jpg';
                          }}
                        />
                        <div className="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-30 transition-all duration-300 flex items-center justify-center">
                          <div className="opacity-0 group-hover:opacity-100 transition-opacity duration-300">
                            <div className="bg-white/90 dark:bg-gray-800/90 p-3 rounded-full">
                              <svg className="w-6 h-6 text-gray-800 dark:text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                              </svg>
                            </div>
                          </div>
                        </div>
                      </div>
                    );
                  })}
                </div>
              )}
            </div>
          </div>
        </div>
      </main>

      {/* Photo Modal */}
      {selectedPhoto && (
        <div 
          className="fixed inset-0 bg-black/95 backdrop-blur-sm flex items-center justify-center z-50 p-4"
          onClick={() => {
            setSelectedPhoto(null);
            setSelectedPhotoIndex(null);
          }}
        >
          <div className="relative max-w-5xl max-h-full">
            <img 
              src={selectedPhoto} 
              alt="Büyük fotoğraf" 
              className="max-h-[90vh] max-w-full rounded-2xl shadow-2xl"
            />
            
            <button 
              className="absolute top-4 right-4 bg-black/70 backdrop-blur-sm text-white rounded-full p-3 hover:bg-black/80 transition-colors duration-200"
              onClick={(e) => {
                e.stopPropagation();
                setSelectedPhoto(null);
                setSelectedPhotoIndex(null);
              }}
            >
              <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
            
            {photos.length > 1 && (
              <>
                <button 
                  className="absolute left-4 top-1/2 transform -translate-y-1/2 bg-black/70 backdrop-blur-sm text-white rounded-full p-3 hover:bg-black/80 transition-colors duration-200"
                  onClick={(e) => {
                    e.stopPropagation();
                    if (selectedPhotoIndex !== null) {
                      const prevIndex = (selectedPhotoIndex - 1 + photos.length) % photos.length;
                      setSelectedPhotoIndex(prevIndex);
                      const prevPhoto = photos[prevIndex];
                      const prevPhotoUrl = prevPhoto.localUrl || 
                        (supabase.storage.from("photos").getPublicUrl(prevPhoto.name).data?.publicUrl || 
                        '/fallback/photo-placeholder.jpg');
                      setSelectedPhoto(prevPhotoUrl);
                    }
                  }}
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
                  </svg>
                </button>
                
                <button 
                  className="absolute right-4 top-1/2 transform -translate-y-1/2 bg-black/70 backdrop-blur-sm text-white rounded-full p-3 hover:bg-black/80 transition-colors duration-200"
                  onClick={(e) => {
                    e.stopPropagation();
                    if (selectedPhotoIndex !== null) {
                      const nextIndex = (selectedPhotoIndex + 1) % photos.length;
                      setSelectedPhotoIndex(nextIndex);
                      const nextPhoto = photos[nextIndex];
                      const nextPhotoUrl = nextPhoto.localUrl || 
                        (supabase.storage.from("photos").getPublicUrl(nextPhoto.name).data?.publicUrl || 
                        '/fallback/photo-placeholder.jpg');
                      setSelectedPhoto(nextPhotoUrl);
                    }
                  }}
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                  </svg>
                </button>
              </>
            )}
            
            <div className="absolute bottom-4 left-1/2 transform -translate-x-1/2 bg-black/70 backdrop-blur-sm text-white text-sm py-2 px-4 rounded-full">
              {selectedPhotoIndex !== null ? `${selectedPhotoIndex + 1} / ${photos.length}` : '1 / 1'}
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
